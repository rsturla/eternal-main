name: Build Image
description: "Builds a container image using Podman"

inputs:
  context:
    description: "The build context directory"
    required: false
    default: "."
  containerfile:
    description: "The path to the Containerfile to build"
    required: false
    default: "Containerfile"
  image-name:
    description: "The name of the image to build"
    required: true
  image-tag:
    description: "The tag to apply to the image"
    required: true
  build-args:
    description: "Build arguments to pass to the Podman build.  Newline separated list of key=value pairs."
    required: false
    default: ""
  secrets:
    description: "Secrets to pass to the Podman build"
    required: false
    default: ""
  rechunk:
    description: "Whether the image should be rechunked"
    required: false
    default: false
  rechunk-prev-ref:
    description: "Previous image reference to use when rechunking"
    required: false
  rechunk-max-layers:
    description: 'The maximum number of layers to include in an image'
    required: false
    default: 64
  cache-to:
    description: "Cache destination for Podman build (optional)"
    required: false
    default: ""
  cache-from:
    description: "Cache source for Podman build (optional)"
    required: false
    default: ""
  cache-ttl:
    description: "Cache TTL for Podman build (optional)"
    required: false
    default: ""

outputs:
  image:
    description: "The name of the built image"
    value: ${{ steps.set-outputs.outputs.image }}
  tag:
    description: "The tag applied to the built image"
    value: ${{ steps.set-outputs.outputs.tag }}
  digest:
    description: "The digest of the built image"
    value: ${{ steps.set-outputs.outputs.digest }}

runs:
  using: "composite"
  steps:
    - name: Build
      id: build-podman
      shell: bash
      env:
        BUILD_ARGS_INPUT: ${{ inputs.build-args }}
        SECRETS_INPUT: ${{ inputs.secrets }}
        TAG: ${{ inputs.image-tag }}
        RECHUNK: ${{ inputs.rechunk }}
        CACHE_TO: ${{ inputs.cache-to }}
        CACHE_FROM: ${{ inputs.cache-from }}
        CACHE_TTL: ${{ inputs.cache-ttl }}
      run: |
        set -x

        # If RECHUNK is true, run podman with sudo
        if [[ $RECHUNK == true ]]; then
          podman="sudo podman"
        else
          podman="podman"
        fi

        BUILD_ARGS=()
        while IFS= read -r build_arg; do
          if [ -z "$build_arg" ]; then
            continue
          fi
          BUILD_ARGS+=("--build-arg $build_arg")
        done <<< "${BUILD_ARGS_INPUT}"

        SECRETS=()
        SECRET_DIR=$(mktemp -d)

        # Temporarily disable debug output to avoid leaking secrets
        {
          set +x
          while IFS= read -r line; do
            if [ -z "$line" ]; then
              continue
            fi

            # Extract key=value
            SECRET_ID=$(echo "$line" | cut -d= -f1)
            SECRET_VALUE=$(echo "$line" | cut -d= -f2-)

            # Write secret value to temp file
            SECRET_FILE="$SECRET_DIR/$SECRET_ID"
            echo -n "$SECRET_VALUE" > "$SECRET_FILE"

            # Add --secret option
            SECRETS+=("--secret=id=${SECRET_ID},src=${SECRET_FILE}")
          done <<< "${SECRETS_INPUT}"
          set -x
        } 2>/dev/null

        CACHE_ARGS=()
        if [[ -n "$CACHE_TO" ]]; then
          CACHE_ARGS+=("--cache-to=$CACHE_TO" "--layers")
          if [[ -n "$CACHE_FROM" ]]; then
            CACHE_ARGS+=("--cache-from=$CACHE_FROM")
          fi
          if [[ -n "$CACHE_TTL" ]]; then
            CACHE_ARGS+=("--cache-ttl=$CACHE_TTL")
          fi
        fi
        $podman build \
          ${BUILD_ARGS[@]} \
          ${SECRETS[@]} \
          ${CACHE_ARGS[@]} \
          -t ${{ inputs.image-name }}:$TAG \
          -f ${{ inputs.containerfile }} \
          ${{ inputs.context }}

        # Remove secrets directory
        rm -rf "$SECRET_DIR"

        DIGEST=$($podman image inspect ${{ inputs.image-name }}:${TAG} --format "{{.Digest}}")
        mapfile -t IMAGES < <($podman images --format "{{.ID}} {{.Digest}}" | grep -v "$DIGEST")

        # Loop through images and remove them
        for IMAGE in "${IMAGES[@]}"; do
            IMAGE_ID=$(echo "$IMAGE" | awk '{print $1}')
            echo "Deleting image: $IMAGE_ID"
            $podman rmi -f "$IMAGE_ID"
        done

        echo "digest=$DIGEST" >> $GITHUB_OUTPUT

    - name: Rechunk
      id: rechunk
      if: ${{ inputs.rechunk == 'true' }}
      uses: rsturla/eternal-main/.github/actions/rechunk@custom-rechunk-config
      with:
        ref: ${{ inputs.image-name }}:${{ inputs.image-tag }}
        prev-ref: ${{ inputs.rechunk-rev-ref }}
        max-layers: ${{ inputs.rechunk-max-layers }}

    - name: Set Outputs
      id: set-outputs
      shell: bash
      run: |
        echo "image=${{ inputs.image-name }}" >> $GITHUB_OUTPUT
        echo "tag=${{ inputs.image-tag }}" >> $GITHUB_OUTPUT
        echo "digest=${{ steps.build-podman.outputs.digest }}" >> $GITHUB_OUTPUT
