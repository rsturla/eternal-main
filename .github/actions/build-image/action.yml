name: Build Image
description: "Builds a container image using Podman or Docker"

inputs:
  context:
    description: "The build context directory"
    required: false
    default: "."
  dockerfile:
    description: "The path to the Dockerfile to build"
    required: false
    default: "Containerfile"
  image-name:
    description: "The name of the image to build"
    required: true
  image-tags:
    description: "The tags to apply to the image"
    required: true
  build-args:
    description: "Build arguments to pass to the Docker build.  Newline separated list of key=value pairs."
    required: false
    default: ""
  builder:
    description: "The name of the builder to use (docker or podman)"
    required: false
    default: "podman"

outputs:
  image:
    description: "The name of the built image"
    value: ${{ steps.set-outputs.outputs.image }}
  tags:
    description: "The tags applied to the built image"
    value: ${{ steps.set-outputs.outputs.tags }}
  digest:
    description: "The digest of the built image"
    value: ${{ steps.set-outputs.outputs.digest }}
  builder:
    description: "The builder used to build the image"
    value: ${{ inputs.builder }}

runs:
  using: "composite"
  steps:
    - name: Build (Podman)
      if: ${{ inputs.builder == 'podman' }}
      id: build-podman
      shell: bash
      env:
        BUILD_ARGS_INPUT: ${{ inputs.build-args }}
      run: |
        BUILD_ARGS=()
        while IFS= read -r build_arg; do
          if [ -z "$build_arg" ]; then
            continue
          fi
          BUILD_ARGS+=("--build-arg $build_arg")
        done <<< "${BUILD_ARGS_INPUT}"

        TAGS_FLAGS=""
        IFS=' ' read -r -a tag_array <<< "${{ inputs.image-tags }}"
        for tag in "${tag_array[@]}"; do
          TAGS_FLAGS+="--tag ${{ inputs.image-name }}:$tag "
        done

        podman build \
          "${BUILD_ARGS[@]}" \
          $TAGS_FLAGS \
          -f ${{ inputs.dockerfile }} \
          ${{ inputs.context }}

        digest=$(podman image inspect ${{ inputs.image-name }}:${tag_array[0]} --format "{{.Digest}}")
        echo "digest=$digest" >> $GITHUB_OUTPUT

    - name: Build (Docker)
      if: ${{ inputs.builder == 'docker' }}
      id: build-docker
      shell: bash
      env:
        BUILD_ARGS_INPUT: ${{ inputs.build-args }}
      run: |
        set -ex

        BUILD_ARGS=()
        while IFS= read -r build_arg; do
          if [ -z "$build_arg" ]; then
            continue
          fi
          BUILD_ARGS+=("--build-arg $build_arg")
        done <<< "${BUILD_ARGS_INPUT}"

        TAGS_FLAGS=""
        IFS=' ' read -r -a tag_array <<< "${{ inputs.image-tags }}"
        for tag in "${tag_array[@]}"; do
          TAGS_FLAGS+="--tag ${{ inputs.image-name }}:$tag "
        done

        docker build \
          ${BUILD_ARGS[@]} \
          $TAGS_FLAGS \
          -f ${{ inputs.dockerfile }} \
          ${{ inputs.context }}

        digest=$(docker image inspect ${{ inputs.image-name }}:${tag_array[0]} --format "{{.Id}}")
        echo "digest=$digest" >> $GITHUB_OUTPUT

    - name: Set Outputs
      id: set-outputs
      shell: bash
      env:
        BUILDER: ${{ inputs.builder }}
      run: |
        echo "image=${{ inputs.image-name }}" >> $GITHUB_OUTPUT
        if [ "$BUILDER" == "podman" ]; then
          echo "tags=${{ inputs.image-tags }}" >> $GITHUB_OUTPUT
          echo "digest=${{ steps.build-podman.outputs.digest }}" >> $GITHUB_OUTPUT
        else
          echo "tags=${{ inputs.image-tags }}" >> $GITHUB_OUTPUT
          echo "digest=${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT
        fi
