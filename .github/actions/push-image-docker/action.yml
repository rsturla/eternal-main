name: Push Image (Docker)

inputs:
  image-name:
    description: 'The name of the image to build'
    required: true
  image-tags:
    description: 'The tags to apply to the image'
    required: true
  image-registry:
    description: 'The registry to push the image to'
    required: true
  registry-username:
    description: 'The username to authenticate with the registry'
    required: false
    default: ${{ github.actor }}
  registry-password:
    description: 'The password to authenticate with the registry'
    required: false
    default: ${{ github.token }}
  compression-formats:
    description: 'A comma-separated list of compression formats to use'
    required: false
    default: 'gzip,zstd'

outputs:
  registry-path:
    description: 'The path to the pushed image in the registry'
    value: ${{ steps.set-outputs.outputs.registry-path }}
  digest:
    description: 'The digest of the image in the registry'
    value: ${{ steps.set-outputs.outputs.digest }}

runs:
  using: 'composite'
  steps:
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login (Docker)
      uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
      with:
        registry: ${{ inputs.image-registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - name: Push (Docker)
      id: push-docker
      shell: bash
      run: |
        # Convert the tags and compression formats to an array
        IFS=' ' read -ra TAGS <<< "${{ inputs.image-tags }}"
        IFS=',' read -ra COMPRESSION_FORMATS <<< "${{ inputs.compression-formats }}"
        tags=()
        for tag in "${TAGS[@]}"; do
          tags+=("${{ inputs.image-registry }}/${{ inputs.image-name }}:${tag}")
        done

        docker image ls
        image="${{ inputs.image-name }}:${TAGS[0]}"
        echo "FROM ${image}" > /tmp/Dockerfile

        # Push the image with each compression format
        for compression_format in "${COMPRESSION_FORMATS[@]}"; do
          tag_flags=()
          for tag in "${tags[@]}"; do
            tag_flags+=("--tag ${tag}-${compression_format}")
          done

          docker buildx build \
            --output type=image,name="${image}",oci-mediatypes=true,compression=${compression_format},compression-level=3 \
            --file /tmp/Dockerfile \
            ${tag_flags[@]} \
            --push .
        done

        digest=$(skopeo inspect docker://${tags[0]} --format '{{.Digest}}')

        # Set the outputs
        echo "registry-path=${tags[0]}" >> $GITHUB_OUTPUT
        echo "tags=${tags[@]}" >> $GITHUB_OUTPUT
        echo "digest=${digest}" >> $GITHUB_OUTPUT
        echo "compression-formats=${COMPRESSION_FORMATS[@]}" >> $GITHUB_OUTPUT

    - name: Create manifest
      id: create-manifest
      shell: bash
      env:
        COMPRESSION_FORMATS: ${{ inputs.compression-formats }}
      run: |


    - name: Set Outputs
      id: set-outputs
      shell: bash
      run: |
        echo "registry-path=${{ steps.push-docker.outputs.registry-path }}" >> $GITHUB_OUTPUT
        echo "digest=${{ steps.push-docker.outputs.digest }}" >> $GITHUB_OUTPUT
