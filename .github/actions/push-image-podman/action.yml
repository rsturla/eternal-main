name: Push Image (Podman)

inputs:
  image-name:
    description: 'The name of the image to build'
    required: true
  manifest-tags:
    description: 'The tags to apply to the image'
    required: true
  image-registry:
    description: 'The registry to push the image to'
    required: true
  registry-username:
    description: 'The username to authenticate with the registry'
    required: false
    default: ${{ github.actor }}
  registry-password:
    description: 'The password to authenticate with the registry'
    required: false
    default: ${{ github.token }}
  compression-formats:
    description: 'A space-separated list of compression formats to use. Best to include gzip as the first option for compatibility.'
    required: false
    default: 'gzip'
  intermediary-tag:
    description: 'A unique identifier to use for the compression-specific image tags'
    required: false

outputs:
  registry-path:
    description: 'The path to the pushed image in the registry'
    value: ${{ steps.set-outputs.outputs.registry-path }}
  digest:
    description: 'The digest of the image in the registry'
    value: ${{ steps.set-outputs.outputs.digest }}
  compression-formats:
    description: 'The compression formats used for the image'
    value: ${{ inputs.compression-formats }}

runs:
  using: 'composite'
  steps:
    - name: Login to Registry
      uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
      with:
        registry: ${{ inputs.image-registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - name: Tag and Push Image
      id: tag-and-push
      shell: bash
      env:
        COMPRESSION_FORMATS: ${{ inputs.compression-formats }}
        IMAGE_NAME: ${{ inputs.image-name }}
        IMAGE_REGISTRY: ${{ inputs.image-registry }}
        INTERMEDIARY_TAG: ${{ inputs.intermediary-tag }}
      run: |
        IFS=' ' read -r -a compression_formats_array <<< "${COMPRESSION_FORMATS}"
        sanitized_compression_formats=()
        intermediary_tag_reference="${IMAGE_REGISTRY}/${IMAGE_NAME}:${INTERMEDIARY_TAG}"

        for format in "${compression_formats_array[@]}"; do
          sanitized_format=$(echo "$format" | tr ':' '-')
          sanitized_compression_formats+=("$sanitized_format")
          full_tag="${intermediary_tag_reference}-${sanitized_format}"
          echo "Tagging: ${IMAGE_NAME}:${INTERMEDIARY_TAG} as ${full_tag} with ${format} compression"
          podman tag "${IMAGE_NAME}:${INTERMEDIARY_TAG}" "${full_tag}"
          podman push --compression-format="$format" "${full_tag}"
        done

        echo "intermediary-tag-reference=${intermediary_tag_reference}" >> $GITHUB_OUTPUT
        echo "sanitized-compression-formats=${sanitized_compression_formats[*]}" >> $GITHUB_OUTPUT

    - name: Create and Push Manifests
      id: create-and-push-manifests
      shell: bash
      env:
        COMPRESSION_FORMATS: ${{ inputs.compression-formats }}
        SANITIZED_COMPRESSION_FORMATS: ${{ steps.tag-and-push.outputs.sanitized-compression-formats }}
        IMAGE_NAME: ${{ inputs.image-name }}
        IMAGE_REGISTRY: ${{ inputs.image-registry }}
        INTERMEDIARY_TAG_REFERENCE: ${{ steps.tag-and-push.outputs.intermediary-tag-reference }}
        MANIFEST_TAGS: ${{ inputs.manifest-tags }}
      run: |
        IFS=' ' read -r -a SANITIZED_COMPRESSION_FORMATS <<< "${SANITIZED_COMPRESSION_FORMATS}"
        IFS=' ' read -r -a MANIFEST_TAGS <<< "${MANIFEST_TAGS}"
        IFS=' ' read -r -a COMPRESSION_FORMATS <<< "${COMPRESSION_FORMATS}"

        manifest_digests=()
        tagged_image_references=()
        for tag in "${MANIFEST_TAGS[@]}"; do
          manifest_name="${IMAGE_REGISTRY}/${IMAGE_NAME}:${tag}"
          echo "Creating manifest: ${manifest_name}"
          podman manifest create ${manifest_name}

          for format in ${SANITIZED_COMPRESSION_FORMATS[@]}; do
            echo "Adding ${INTERMEDIARY_TAG_REFERENCE}-${format} to ${manifest_name}"
            podman manifest add ${manifest_name} ${INTERMEDIARY_TAG_REFERENCE}-${format}
          done

          podman manifest push --all ${manifest_name}
          manifest_digests+=($(skopeo inspect docker://${manifest_name} --format '{{.Digest}}'))
          tagged_image_references+=("${manifest_name}")
        done

        echo "digest=${manifest_digests[0]}" >> $GITHUB_OUTPUT
        echo "tagged-image-references=${tagged_image_references[*]}" >> $GITHUB_OUTPUT


    - name: Set Outputs
      id: set-outputs
      shell: bash
      run: |
        IFS=' ' read -r -a TAGGED_IMAGE_REFERENCES <<< "${{ steps.create-and-push-manifests.outputs.tagged-image-references }}"

        echo "registry-path=${TAGGED_IMAGE_REFERENCES[0]}" >> $GITHUB_OUTPUT
        echo "compression-formats=${{ inputs.compression-formats }}" >> $GITHUB_OUTPUT
        echo "digest=${{ steps.create-and-push-manifests.outputs.digest }}" >> $GITHUB_OUTPUT
