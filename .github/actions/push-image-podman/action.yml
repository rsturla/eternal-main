name: Push Image (Podman)

inputs:
  image-name:
    description: 'The name of the image to build'
    required: true
  image-tags:
    description: 'The tags to apply to the image'
    required: true
  image-registry:
    description: 'The registry to push the image to'
    required: true
  registry-username:
    description: 'The username to authenticate with the registry'
    required: false
    default: ${{ github.actor }}
  registry-password:
    description: 'The password to authenticate with the registry'
    required: false
    default: ${{ github.token }}
  compression-formats:
    description: 'A space-separated list of compression formats to use.  Best to include gzip as the first option for compatibility.'
    required: false
    default: 'gzip zstd zstd:chunked'

outputs:
  registry-path:
    description: 'The path to the pushed image in the registry'
    value: ${{ steps.set-outputs.outputs.registry-path }}
  digest:
    description: 'The digest of the image in the registry'
    value: ${{ steps.set-outputs.outputs.digest }}
  compression-formats:
    description: 'The compression formats used for the image'
    value: ${{ inputs.compression-formats }}

runs:
  using: 'composite'
  steps:
    - name: Login to Registry
      uses: docker/login-action@0d4c9c5ea7693da7b068278f7b52bda2a190a446 # v3
      with:
        registry: ${{ inputs.image-registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - name: Tag and Push Image
      id: tag-and-push
      shell: bash
      run: |
        IFS=' ' read -ra compression_formats <<< "${{ inputs.compression-formats }}"
        IFS=' ' read -ra image_tags <<< "${{ inputs.image-tags }}"
        tagged_image_references=()
        compression_formats_sanitized=()

        # Replace colons with dashes in compression formats
        for format in "${compression_formats[@]}"; do
          compression_formats_sanitized+=("${format//:/-}")
        done

        for tag in "${image_tags[@]}"; do
          for format in "${compression_formats[@]}"; do
            full_tag="${{ inputs.image-registry }}/${{ inputs.image-name }}:${tag}-${format}"
            echo "Tagging and pushing: ${{ inputs.image-name }}:${tag} as ${full_tag} with ${format} compression"
            podman tag ${{ inputs.image-name }}:${tag} ${full_tag}
            podman push --compression-format=${format} ${full_tag}
          done
          tagged_image_references+=("${{ inputs.image-registry }}/${{ inputs.image-name }}:${tag}")
        done

        echo "tagged-image-references=${tagged_image_references[@]}" >> $GITHUB_OUTPUT
        echo "compression-formats-sanitized=${compression_formats_sanitized[@]}" >> $GITHUB_OUTPUT

    - name: Create and Push Manifests
      id: create-and-push-manifests
      shell: bash
      run: |
        IFS=' ' read -ra tagged_image_references <<< "${{ steps.tag-and-push.outputs.tagged-image-references }}"
        IFS=' ' read -ra compression_formats_sanitized <<< "${{ steps.tag-and-push.outputs.compression-formats-sanitized }}"

        podman image ls

        for tag_reference in "${tagged_image_references[@]}"; do
          podman manifest create ${tag_reference}

          for format in "${compression_formats_sanitized[@]}"; do
            full_image_reference="${tag_reference}-${format}"
            echo "Adding image ${full_image_reference} to manifest ${tag_reference}"
            podman manifest add ${tag_reference} docker://${full_image_reference}
          done

          podman manifest push --all=false ${tag_reference} docker://${tag_reference}

          manifest_digest=$(skopeo inspect docker://${tag_reference} --format '{{.Digest}}')
          echo "digest-${tag_reference}=${manifest_digest}" >> $GITHUB_OUTPUT
        done

    - name: Set Outputs
      id: set-outputs
      shell: bash
      run: |
        IFS=' ' read -ra tagged_image_references <<< "${{ steps.tag-and-push.outputs.tagged-image-references }}"
        echo "registry-path=${tagged_image_references[0]}" >> $GITHUB_OUTPUT

        for tag_reference in "${tagged_image_references[@]}"; do
          manifest_digest=$(skopeo inspect docker://${tag_reference} --format '{{.Digest}}')
          echo "digest-${tag_reference}=${manifest_digest}" >> $GITHUB_OUTPUT
        done

        echo "compression-formats=${{ inputs.compression-formats }}" >> $GITHUB_OUTPUT
