name: Build ISO

on:
  workflow_call:
    inputs:
      image-registry:
        required: true
        type: string
      image-name:
        required: true
        type: string
      image-tag:
        required: true
        type: string
      flatpak-manifest-lists:
        required: true
        type: string
      upload-to-cloudflare:
        required: false
        type: boolean
        default: false
      r2-bucket:
        required: false
        type: string
      arch:
        required: false
        type: string
        default: x86_64
      hook-post-rootfs:
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Combine Flatpak Manifest Lists
        id: flatpak-manifest-list
        env:
          FLATPAK_MANIFEST_LISTS: ${{ inputs.flatpak-manifest-lists }}
        shell: bash
        run: |
          set -euox pipefail

          # Simply combine the Flatpak manifest lists into a single file
          MANIFESTS_FILE=$(mktemp)
          for manifest in $FLATPAK_MANIFEST_LISTS; do
            cat "$manifest" >> "$MANIFESTS_FILE"
          done

          echo "LIST: "
          cat "$MANIFESTS_FILE"

          echo "MANIFESTS_FILE=$MANIFESTS_FILE" >> $GITHUB_OUTPUTS

      - name: Build ISO
        uses: ublue-os/titanoboa@main
        id: build-iso
        with:
          image-ref: ${{ inputs.image-registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}
          hook-post-rootfs: ${{ inputs.hook-post-rootfs }}
          flatpaks-list: ${{ steps.flatpak-manifest-list.outputs.MANIFESTS_FILE }}

      - name: Upload ISO to GitHub
        if: inputs.upload-to-cloudflare == false
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ inputs.image-name }}-${{ inputs.image-tag }}-${{ inputs.arch }}-iso
          path: |
            ${{ steps.build-iso.outputs.iso-dest }}

      - name: Upload ISO to CloudFlare R2
        if: inputs.upload-to-cloudflare == true
        shell: bash
        env:
          RCLONE_CONFIG_R2_TYPE: s3
          RCLONE_CONFIG_R2_PROVIDER: Cloudflare
          RCLONE_CONFIG_R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          RCLONE_CONFIG_R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          RCLONE_CONFIG_R2_REGION: auto
          RCLONE_CONFIG_R2_ENDPOINT: https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com
          SOURCE_FILE: ${{ steps.build-iso.outputs.iso-dest }}
          DEST_BUCKET: ${{ inputs.r2-bucket }}
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          rclone copy $SOURCE_FILE R2:$DEST_BUCKET
