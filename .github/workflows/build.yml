name: Build Images

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

env:
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build-base:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        fedora-version: [39, 40, stable]
        fedora-edition: [base, silverblue, kinoite]
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: eternal-linux/main/${{ matrix.fedora-edition }}
      FEDORA_VERSION: ${{ matrix.fedora-version }}
      COREOS_KERNEL: "N/A"
    outputs:
      base-image-tag: ${{ steps.generate-image-tags.outputs.primary-tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4

      # - name: Optimize GHA Storage
      #   uses: ./.github/actions/optimise-gha-storage

      - name: Generate Image Tags
        uses: ./.github/actions/generate-image-tags
        id: generate-image-tags
        with:
          image-name: ${{ env.IMAGE_REGISTRY}}/${{ env.IMAGE_NAME }}
          major-version: ${{ env.FEDORA_VERSION }}
          is-release: ${{ github.event_name != 'pull_request' }}

      - name: Setup Podman machine
        run: |
          podman pull docker://quay.io/podman/stable:latest
          systemctl enable --now podman.socket
          mkdir -p ~/var/lib/mycontainer ~/run/podman
          podman run --detach --name=podmanctr --net=host --security-opt label=disable --security-opt seccomp=unconfined --device /dev/fuse:rw -v $HOME/var/lib/mycontainer:/var/lib/containers:Z --privileged -v $HOME/run/podman:/run/user/1000  stable sh -c 'while true ;do sleep 100000 ; done'
          podman exec -it podmanctr /bin/bash > /dev/null 2>&1 &

          # podman --remote system connection add podmanctr ssh://root@localhost${HOME}/run/podman/podman.sock
          # podman --remote system connection default podmanctr

          # Symlink the podman.sock to the default location
          sudo ln -s ${HOME}/run/podman/podman.sock /run/podman/podman.sock
          ln -s ${HOME}/run/podman/podman.sock /run/user/1000/podman/podman.sock

      - name: Test
        run: |
          podman version

      - name: Another test
        run: |
          exit 1

      - name: Get CoreOS Kernel Information
        if: ${{ env.FEDORA_VERSION == 'stable' || env.FEDORA_VERSION == 'testing' }}
        uses: ./.github/actions/get-coreos-kernel
        id: get-coreos-kernel
        with:
          coreos-stream: ${{ env.FEDORA_VERSION }}

      - name: Set CoreOS Environment Variables
        if: ${{ env.FEDORA_VERSION == 'stable' || env.FEDORA_VERSION == 'testing' }}
        run: |
          echo "COREOS_KERNEL=${{ steps.get-coreos-kernel.outputs.coreos-kernel-release }}" >> $GITHUB_ENV
          echo "FEDORA_VERSION=${{ steps.get-coreos-kernel.outputs.coreos-repo-version }}" >> $GITHUB_ENV

      - name: Build Image
        id: build
        uses: ./.github/actions/build-image
        with:
          builder: podman
          context: .
          dockerfile: Containerfile
          image-name: ${{ env.IMAGE_NAME }}
          image-tags: |
            ${{ steps.generate-image-tags.outputs.tags }}
          build-args: |
            FEDORA_VERSION=${{ env.FEDORA_VERSION }}
            FEDORA_EDITION=${{ matrix.fedora-edition }}
            COREOS_KERNEL=${{ env.COREOS_KERNEL }}

      - name: Push Image
        id: push
        uses: ./.github/actions/push-image
        with:
          builder: ${{ steps.build.outputs.builder }}
          image-name: ${{ steps.build.outputs.image }}
          image-tags: ${{ steps.build.outputs.tags }}
          image-registry: ${{ env.IMAGE_REGISTRY }}
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign Image
        uses: ./.github/actions/sign-image
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          registry-provider: ghcr.io
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          digest: ${{ steps.build.outputs.digest }}
          private-key: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY }}
          private-key-passphrase: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY_PASSPHRASE }}

      - name: Generate SBOM
        id: generate-sbom
        if: github.event_name != 'pull_request'
        uses: ./.github/actions/generate-sbom
        with:
          image-ref: ${{ steps.push.outputs.registry-path }}
          artifact-name: ${{ matrix.fedora-edition }}-${{ matrix.fedora-version }}-sbom

      - name: Scan SBOM
        uses: ./.github/actions/scan-sbom
        if: github.event_name != 'pull_request'
        with:
          sbom-file: ${{ steps.generate-sbom.outputs.output-file }}
          artifact-name: ${{ matrix.fedora-edition }}-${{ matrix.fedora-version }}-scan

  build-nvidia:
    runs-on: ubuntu-latest
    needs: build-base
    if: ${{ !cancelled() }}
    strategy:
      fail-fast: false
      matrix:
        fedora-version: [39, 40, stable]
        fedora-edition: [base, silverblue, kinoite]
        nvidia-version: [550]
        include:
          - nvidia-version: 550
            nvidia-is-stable: true
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      IMAGE_NAME: eternal-linux/main/${{ matrix.fedora-edition }}
      FEDORA_VERSION: ${{ matrix.fedora-version }}
      COREOS_KERNEL: "N/A"
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4

      - name: Optimize GHA Storage
        uses: ./.github/actions/optimise-gha-storage

      - name: Generate Image Tags
        uses: ./.github/actions/generate-image-tags
        id: generate-image-tags
        with:
          image-name: ${{ env.IMAGE_REGISTRY}}/${{ env.IMAGE_NAME }}
          major-version: ${{ env.FEDORA_VERSION }}
          is-release: ${{ github.event_name != 'pull_request' }}
          nvidia-driver-version: ${{ matrix.nvidia-version }}
          nvidia-driver-is-stable: ${{ matrix.nvidia-is-stable }}

      - name: Get CoreOS Kernel Information
        if: ${{ env.FEDORA_VERSION == 'stable' || env.FEDORA_VERSION == 'testing' }}
        uses: ./.github/actions/get-coreos-kernel
        id: get-coreos-kernel
        with:
          coreos-stream: ${{ env.FEDORA_VERSION }}

      - name: Set CoreOS Environment Variables
        if: ${{ env.FEDORA_VERSION == 'stable' || env.FEDORA_VERSION == 'testing' }}
        run: |
          echo "COREOS_KERNEL=${{ steps.get-coreos-kernel.outputs.coreos-kernel-release }}" >> $GITHUB_ENV
          echo "FEDORA_VERSION=${{ steps.get-coreos-kernel.outputs.coreos-repo-version }}" >> $GITHUB_ENV

      - name: Generate Base Image Tag
        id: generate-base-image-tag
        env:
          BASE_FEDORA_VERSION: ${{ matrix.fedora-version }}
          PR_NUMBER: ${{ github.event.number }}
          IS_PR: ${{ github.event_name == 'pull_request' }}
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          if [ $IS_PR == 'true' ]; then
            BASE_TAG="pr${PR_NUMBER}-${GIT_SHA}-${BASE_FEDORA_VERSION}"
          else
            BASE_TAG="${GIT_SHA}-${BASE_FEDORA_VERSION}"
          fi
          echo "base-tag=${BASE_TAG}" >> $GITHUB_OUTPUT

      - name: Build Image
        id: build
        uses: ./.github/actions/build-image
        with:
          builder: podman
          context: .
          dockerfile: Containerfile.nvidia
          image-name: ${{ env.IMAGE_NAME }}
          image-tags: |
            ${{ steps.generate-image-tags.outputs.tags }}
          build-args: |
            FEDORA_VERSION=${{ env.FEDORA_VERSION }}
            FEDORA_EDITION=${{ matrix.fedora-edition }}
            NVIDIA_VERSION=${{ matrix.nvidia-version }}
            BASE_TAG=${{ steps.generate-base-image-tag.outputs.base-tag }}
            NVIDIA_AKMODS_TAG=${{ matrix.fedora-version }}-${{ matrix.nvidia-version }}

      - name: Push Image
        id: push
        uses: ./.github/actions/push-image
        with:
          builder: ${{ steps.build.outputs.builder }}
          image-name: ${{ steps.build.outputs.image }}
          image-tags: ${{ steps.build.outputs.tags }}
          image-registry: ${{ env.IMAGE_REGISTRY }}
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign Image
        uses: ./.github/actions/sign-image
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}
          registry-provider: ghcr.io
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}
          digest: ${{ steps.build.outputs.digest }}
          private-key: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY }}
          private-key-passphrase: ${{ secrets.ETERNAL_LINUX_SIGNING_KEY_PASSPHRASE }}

      - name: Generate SBOM
        id: generate-sbom
        uses: ./.github/actions/generate-sbom
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ steps.push.outputs.registry-path }}
          artifact-name: ${{ matrix.fedora-edition }}-${{ matrix.fedora-version }}-nvidia${{ matrix.nvidia-version }}-sbom

      - name: Scan SBOM
        uses: ./.github/actions/scan-sbom
        if: github.event_name != 'pull_request'
        with:
          sbom-file: ${{ steps.generate-sbom.outputs.output-file }}
          artifact-name: ${{ matrix.fedora-edition }}-${{ matrix.fedora-version }}-nvidia${{ matrix.nvidia-version }}-scan

  check:
    needs: [build-base, build-nvidia]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4

      - name: Check Job Status
        uses: ./.github/actions/check-jobs-success
        with:
          jobs: ${{ toJSON(needs) }}
