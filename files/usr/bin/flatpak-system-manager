#!/usr/bin/env bash

# Define hashed files
declare -a HASHED_LOCATIONS=(
  "/etc/eternal/flatpak-manager/system/install"
  "/etc/eternal/flatpak-manager/system/remove"
  "/usr/bin/flatpak-system-manager"
  "/usr/lib/systemd/system/flatpak-system-manager.service"
)

IS_ERROR=0

CURRENT_HASH=$(find "${HASHED_LOCATIONS[@]}" -type f -exec sha256sum {} \; | sha256sum | awk '{print $1}')
HASH_FILE="/etc/eternal/flatpak-manager/system-lastrun"

# Compare hash to the last run
if [[ -f "$HASH_FILE" ]]; then
  PREVIOUS_HASH=$(cat "$HASH_FILE")
  if [[ "$CURRENT_HASH" == "$PREVIOUS_HASH" ]]; then
    echo "Flatpak manager has already run. Exiting..."
    exit 0
  fi
fi

# Opt out of and remove Fedora's flatpak repo
if grep -qz 'fedora' <<< "$(flatpak remotes)"; then
  FEDORA_FLATPAKS=$(flatpak list --columns=application,origin | grep -w 'fedora' | awk '{print $1}')
  for flatpak in $FEDORA_FLATPAKS; do
    if ! flatpak remove --system --noninteractive --force-remove "$flatpak"; then
      IS_ERROR=1
    fi
  done

  /usr/lib/fedora-third-party/fedora-third-party-opt-out
  /usr/bin/fedora-third-party disable
  flatpak remote-delete fedora --force
fi

# Lists of flatpaks
FLATPAK_LIST=$(flatpak list --columns=application)
INSTALL_LIST=$(cat "/etc/eternal/flatpak-manager/system/install")
REMOVE_LIST=$(cat "/etc/eternal/flatpak-manager/system/remove")

# Install flatpaks in the list
if [[ -n "$INSTALL_LIST" ]]; then
  for flatpak in $INSTALL_LIST; do
    if ! grep -qz "$flatpak" <<< "$FLATPAK_LIST"; then
      if ! flatpak install --system --noninteractive flathub "$flatpak"; then
        IS_ERROR=1
      fi
    fi
  done
fi

# Remove flatpaks in the list
if [[ -n "$REMOVE_LIST" ]]; then
  for flatpak in $REMOVE_LIST; do
    if grep -qz "$flatpak" <<< "$FLATPAK_LIST"; then
      if ! flatpak remove --system --noninteractive "$flatpak"; then
        IS_ERROR=1
      fi
    fi
  done
fi

# If there were no errors, update the hash file
if [[ $IS_ERROR -eq 0 ]]; then
  mkdir -p "$(dirname "$HASH_FILE")"
  echo "$CURRENT_HASH" > "$HASH_FILE"
fi

exit $IS_ERROR
